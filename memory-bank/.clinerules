# Hill Metrics Financial Screener - Project Intelligence

## Project Patterns

### Coding Standards
- Follow C# coding conventions for backend development
- Follow React/JavaScript best practices for frontend development
- Use camelCase for JavaScript variables and functions
- Use PascalCase for C# classes and methods
- Use kebab-case for file names in the frontend
- Use PascalCase for file names in the backend
- Maintain consistent indentation (2 spaces for JavaScript, 4 spaces for C#)
- Add XML documentation comments to public C# APIs
- Use JSDoc comments for complex JavaScript functions

### Naming Conventions
- Prefix interface names with "I" in C# (e.g., IInstrumentRepository)
- Suffix repository classes with "Repository" (e.g., InstrumentRepository)
- Suffix service classes with "Service" (e.g., InstrumentService)
- Suffix controller classes with "Controller" (e.g., InstrumentsController)
- Use plural names for API endpoints (e.g., /api/instruments)
- Use singular names for database tables (e.g., Instrument)
- Prefix React component files with uppercase (e.g., SearchBar.jsx)

### Architecture Patterns
- Follow the repository pattern for data access
- Use dependency injection for service resolution
- Implement services for business logic
- Use controllers for API endpoints
- Separate concerns between data access, business logic, and presentation
- Use DTOs for data transfer between layers
- Implement proper validation at API boundaries

### Frontend Patterns
- Use functional components with hooks in React
- Implement container/presentational component pattern
- Use custom hooks for reusable logic
- Implement proper error handling and loading states
- Use async/await for asynchronous operations
- Implement responsive design for all components
- Use CSS modules or styled-components for styling
- Maintain consistent heights for components that appear in the same row or section
- Implement interactive elements (tooltips, hover effects) for better user feedback
- Favor fixed height values when components need precise visual alignment

### Frontend Page Creation
- User will provide code for frontend pages
- When starting work on frontend components, ask user to provide code files
- Follow provided code patterns for consistency across the application
- Implement provided code with minimal modifications unless improvements are necessary

### Database Patterns
- Use migrations for database schema changes
- Implement proper indexing for frequently queried columns
- Use foreign key constraints for referential integrity
- Implement soft delete where appropriate
- Use stored procedures for complex queries (if necessary)
- Implement proper transaction handling

## User Preferences

### Communication Style
- Provide clear, concise explanations
- Use technical terminology appropriately
- Include code examples when explaining concepts
- Offer multiple solutions with pros and cons when applicable
- Explain the reasoning behind technical decisions

### Development Workflow
- Focus on one feature at a time
- Implement core functionality before adding enhancements
- Write tests for critical functionality
- Document complex logic and decisions
- Refactor code when necessary to maintain quality
- Commit and push changes to Git after completing each step with descriptive commit messages

### Code Quality Priorities
- Maintainability and readability
- Performance optimization for critical paths
- Proper error handling and edge cases
- Comprehensive test coverage
- Clear documentation

## Project-Specific Knowledge

### Critical Implementation Paths
- Search and filtering functionality is a core feature
- Instrument comparison requires special attention to performance
- User authentication and authorization is essential for security
- Data visualization needs to be responsive and interactive

### Known Challenges
- Complex filtering requirements across multiple dimensions
- Performance considerations with large datasets
- Cross-asset comparison with different attributes
- User interface complexity with many features and options

### Technical Constraints
- MySQL database for data storage
- .NET Core for backend development
- React for frontend development
- JWT for authentication
- Responsive design for various devices

## Tool Usage Patterns

### Development Tools
- Visual Studio or Visual Studio Code for development
- npm or yarn for frontend package management
- NuGet for backend package management
- Entity Framework Core for database access
- Git for version control

### Testing Tools
- xUnit for backend unit testing
- Jest for frontend unit testing
- React Testing Library for component testing
- Postman for API testing
- Cypress for end-to-end testing (if needed)

### Deployment Tools
- Docker for containerization (optional)
- CI/CD pipeline for automated deployment
- Environment-specific configuration files

## Project Evolution

### Phase 1: Core Functionality
- Basic search and filtering
- Results display
- Instrument details view

### Phase 2: Enhanced Features
- Instrument comparison
- Data visualization
- User authentication

### Phase 3: Advanced Capabilities
- Advanced filtering options
- Saved searches and preferences
- Performance optimizations

### Future Considerations
- Mobile applications
- Real-time data updates
- Advanced analytics and recommendations

# Coding workflow preferences

- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly instructed
- Always think about what other methods and areas of code might be affected by code changes

# Coding pattern preferences

- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200-300 lines of code. Refactor at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming

# Critical Rules

- NEVER implement code or make changes unless explicitly instructed by the user
- Always ask for confirmation before implementing any significant changes
- Do not assume what the user wants - ask clarifying questions when instructions are ambiguous
- Wait for explicit approval before proceeding with any code implementation
- Focus on understanding requirements thoroughly before suggesting solutions

# Database
Host: localhost
Port: 3306
Username: root
Password: [there is no pass]
Database: hill-database
